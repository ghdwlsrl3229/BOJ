#include <bits/stdc++.h>
#include <unordered_set>
#include <unordered_map>
#include <random>
using namespace std;
#define ll long long
#define fr first
#define sc second
#define pll pair<ll, ll>
#define all(v) v.begin(), v.end()

ll N, M, T, D;
int arr[30][30];
ll dist[30][30];
ll dist2[30][30];
int dy[] = { 0, 0, -1, 1 };
int dx[] = { -1, 1, 0, 0 };

const ll INF = 1e9;
void Dijkstra1() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			dist[i][j] = INF;
	dist[0][0] = 0;
	priority_queue<pll, vector<pll>, greater<pll>> pq;
	pq.push({ 0, 0 });
	while (pq.size()) {
		auto p = pq.top(); pq.pop();

		int y = p.second / 30;
		int x = p.second % 30;
		ll d = p.first;
		if (d > dist[y][x]) continue;

		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || nx < 0 || ny >= N || nx >= M) continue;
			if (abs(arr[y][x] - arr[ny][nx]) > T) continue;
			ll d2 = d;
			if (arr[y][x] >= arr[ny][nx]) d2 += 1;
			else d2 += (arr[y][x] - arr[ny][nx]) * (arr[y][x] - arr[ny][nx]);
			if (d2 < dist[ny][nx]) {
				dist[ny][nx] = d2;
				pq.push({ d2, ny * 30 + nx });
			}
		}
	}
}

void Dijkstra2() {
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			dist2[i][j] = INF;
	dist2[0][0] = 0;
	priority_queue<pll, vector<pll>, greater<pll>> pq;
	pq.push({ 0, 0 });
	while (pq.size()) {
		auto p = pq.top(); pq.pop();

		int y = p.second / 30;
		int x = p.second % 30;
		ll d = p.first;
		if (d > dist2[y][x]) continue;
		for (int i = 0; i < 4; i++) {
			int ny = y + dy[i];
			int nx = x + dx[i];
			if (ny < 0 || nx < 0 || ny >= N || nx >= M) continue;
			if (abs(arr[y][x] - arr[ny][nx]) > T) continue;
			ll d2 = d;
			if (arr[y][x] > arr[ny][nx]) d2 += (arr[y][x] - arr[ny][nx]) * (arr[y][x] - arr[ny][nx]);
			else d2 += 1;
			if (d2 < dist2[ny][nx]) {
				dist2[ny][nx] = d2;
				pq.push({ d2, ny * 30 + nx });
			}
		}
	}
}

void solve() {
	cin >> N >> M >> T >> D;
	for (int i = 0; i < N; i++) {
		string s; cin >> s;
		for (int j = 0; j < M; j++) {
			if ('a' <= s[j] && s[j] <= 'z') arr[i][j] = s[j] - 'a' + 26;
			else arr[i][j] = s[j] - 'A';
		}
	}

	Dijkstra1();
	Dijkstra2();

	int mx = arr[0][0];
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
			if (dist[i][j] + dist2[i][j] <= D) mx = max(mx, arr[i][j]);
	}
	cout << mx << '\n';
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	if (0) {
		int T; cin >> T;
		while (T--) solve();
	}
	else {
		solve();
	}
	return 0;
}
